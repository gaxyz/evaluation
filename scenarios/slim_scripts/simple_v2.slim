/// This script has Ne rescaling for variability generation
initialize(){

    initializeMutationRate(1e-7);
    initializeRecombinationRate(1e-7);
    initializeMutationType("m1",0.5,"f",0.0); // Neutral
    initializeMutationType("m2",0.5,"f",0.0); // Neutral until fitness is modified
    m2.color = "red";
    initializeGenomicElementType("g1",m1,1.0);
    // Chromosomes
    initializeGenomicElement(g1, 0, 10*999999);

}
/// 
1 {
	 // Inputtable constants
    //defineConstant("s",0.1);
    //defineConstant("m",0.2);
    //defineConstant("condfreq",0.3);
    //defineConstant("rep_id", "1");
	 //defineConstant("N",1000);
	 //defineConstant("sample_size",50);
    
    // Other constants
    defineConstant("m2_site", 10*499999 );
    // Save run identifier
    defineConstant("simID",getSeed());
    // Add first population 
    sim.addSubpop("p1",N);
    
	 // Write header for frequencies
	 writeFile("p1.mut", "generation p1" );    
	 writeFile("p2.mut", "generation p2" );
    writeFile("p3.mut", "generation p3" );
    writeFile("p4.mut", "generation p4" );
    writeFile("p5.mut", "generation p5" );
    
}

// Add m2 mutations and save
5000 late() {
    // save state
    sim.outputFull("./slim_" + simID + ".txt");
    // introduce m2
    target = sample(p1.genomes,1);
    target.addNewDrawnMutation(m2,m2_site);
}


// Wait and check for establishment

5000:5100 late() {

    mut = sim.mutationsOfType( m2 ) ;
    if ( size(mut) == 1 )
    {
        if (sim.mutationFrequencies(NULL,mut) > condfreq )
        {
            cat( getSeed() + ": ESTABLISHED -- PROCEEDING WITH SPLIT\n" ) ;
            sim.deregisterScriptBlock(self);
        }
    }
    else
    {
            cat(getSeed() + " GENERATION: "+ sim.generation +": LOST BEFORE ESTABLISHMENT -- RESTARTING \n");
            // back to saved gen
            sim.readFromPopulationFile( "./slim_" + simID + ".txt" );
            // start newly seeded run
            setSeed( rdunif(1,0,asInteger(2^62) - 1 ));

            // re introduce mutation
            target = sample( p1.genomes, 1 );
            target.addNewDrawnMutation( m2, m2_site );
    }
}

// Supress m1 mutation generation

5099: mutation(m1) {
    return F;
}
5099 late() {
     // Save state for establishment checking
     sim.outputFull("./slim_" + simID + ".txt");
}

// First split
5100  {
    sim.addSubpopSplit("p2", N , p1 );
}
/// save state
5100 late() {sim.outputFull("./slim_" + simID + ".txt");}


// p1, p2 write m2 frequencies
5100: late() {
	 mut = sim.mutationsOfType(m2);
	 freq = sim.mutationFrequencies(p2,mut);
    writeFile("p2.mut", sim.generation + " " + freq, append = T ); 

	 freq = sim.mutationFrequencies(p1,mut);
    writeFile("p1.mut", sim.generation + " " + freq, append = T ); 
}

//// RESTART SIMULATION IF MUTATION IS LOST ////

5100:7600 late() {
    mut = sim.mutationsOfType( m2 ) ;
	// Store value if mutation is lost. If clause is b/c if m2 is completely lost, it fucks up code
    lost = sim.mutationFrequencies(p2,mut) < 1/(2*N);
    // Only control for selection scenario
    if ( s > 0.0 ){
    	if ( size(lost) == 0 ){
    		cat(getSeed() + " GENERATION "+ sim.generation + ": m2 LOST IN ALL POPS: RESTARTING\n");

    		lost = T;
    		}

    	if ( lost ) {
      	         /// m2 LOST, STOP SIMULATION 
         	 		cat(getSeed()+ " GENERATION "+sim.generation+": m2 LOST: RESTARTING\n");
						/// Rewrite frequency files
				  		writeFile("p1.mut", "generation p1" );    
					  	writeFile("p2.mut", "generation p2" );
    				  	writeFile("p3.mut", "generation p3" );
    				  	writeFile("p4.mut", "generation p4" );
    				  	writeFile("p5.mut", "generation p5" );
             	  	// back to saved gen
            	  	sim.readFromPopulationFile( "./slim_" + simID + ".txt" );
         		  	// start newly seeded run
      		     	setSeed( rdunif(1,0,asInteger(2^62) - 1 ));
              
    	}
    
    }
}
////////////////////////////////////////////


// Second split
5600 {
    sim.addSubpopSplit("p4", N , p2 );
}
/// save state
5600 late() {sim.outputFull("./slim_" + simID + ".txt");}


// p4 write m2 frequencies
5600: late() {
	 mut = sim.mutationsOfType(m2);
	 freq = sim.mutationFrequencies(p4,mut);
    writeFile("p4.mut", sim.generation + " " + freq, append = T ); 
}

// Third split(s)

7100 {
    sim.addSubpopSplit("p3",N,p2);
}

/// save state
7100 late() {sim.outputFull("./slim_" + simID + ".txt");}


7100: late() {
	 mut = sim.mutationsOfType(m2);
	 freq = sim.mutationFrequencies(p3,mut);
    writeFile("p3.mut", sim.generation + " " + freq, append = T ); 
}



// Admixture event

7600 {
	sim.addSubpopSplit("p5",N,p2);
	p5.setMigrationRates(p4,m);
}

/// Cut migration
7601 {
    p5.setMigrationRates(p4,0);	
}

/// save state
7600 late() {sim.outputFull("./slim_" + simID + ".txt");}


/// p5 write frequencies
7600: late() {
	 mut = sim.mutationsOfType(m2);
	 freq = sim.mutationFrequencies(p5,mut);
    writeFile("p5.mut", sim.generation + " " + freq, append = T ); 
}

// Modify fitness in admixed population
7600: fitness(m2, p5){

        return 1.0 + s ; //
       

}

// End simulation and save genotypes
7700 late() {
	p1.outputVCFSample(sampleSize = sample_size,replace = F,outputMultiallelics = F,filePath ="p1.vcf" );
	p2.outputVCFSample(sampleSize = sample_size,replace = F,outputMultiallelics = F,filePath ="p2.vcf" );
	p3.outputVCFSample(sampleSize = sample_size,replace = F,outputMultiallelics = F,filePath ="p3.vcf" );
	p4.outputVCFSample(sampleSize = sample_size,replace = F,outputMultiallelics = F,filePath ="p4.vcf" );
	p5.outputVCFSample(sampleSize = sample_size,replace = F,outputMultiallelics = F,filePath ="p5.vcf" );


   sim.simulationFinished();

}

